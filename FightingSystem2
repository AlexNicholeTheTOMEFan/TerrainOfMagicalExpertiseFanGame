-- Define player and enemy data structures
local Player = {
  x = 0,
  y = 0,
  state = "Idle", -- Current animation state
  animations = {}, -- Table to store animation data
  health = 100,
}

local Enemy = {
  x = 100,
  y = 0,
  state = "Idle",
  animations = {},
  health = 100,
}

-- Animation data structure
local Animation = {
  spriteSheet = "",  -- Path to the sprite sheet (.png)
  startX = 0,        -- X coordinate of the first frame
  startY = 0,        -- Y coordinate of the first frame
  width = 0,         -- Width of each frame
  height = 0,        -- Height of each frame
  frameCount = 0,    -- Total number of frames in the animation
  speed = 0.1,        -- Speed of animation playback (frames per second)
  looping = true,     -- Whether the animation loops back to the start
}

-- Load a sprite sheet and animation data
function loadAnimation(path, startX, startY, width, height, frameCount, speed, looping)
  local animation = {
    spriteSheet = path,
    startX = startX,
    startY = startY,
    width = width,
    height = height,
    frameCount = frameCount,
    speed = speed,
    looping = looping,
  }
  -- (Replace with your sprite library function to load the sprite sheet)
  -- animation.sprite = love.graphics.newImage(path)
  return animation
end

-- Set the animation state for a character
function setAnimation(character, state)
  character.state = state
  character.currentFrame = 1
  character.elapsedTime = 0
end

-- Update animation based on time
function updateAnimation(character, dt)
  character.elapsedTime = character.elapsedTime + dt
  if character.elapsedTime >= 1 / character.animations[character.state].speed then
    character.currentFrame = character.currentFrame + 1
    character.elapsedTime = 0
    if character.currentFrame > character.animations[character.state].frameCount then
      if character.animations[character.state].looping then
        character.currentFrame = 1
      else
        character.currentFrame = character.animations[character.state].frameCount
      end
    end
  end
end

-- Get the current frame data for an animation
function getFrameData(animation, frame)
  local sheetX = animation.startX + (frame - 1) * animation.width
  local sheetY = animation.startY
  return sheetX, sheetY, animation.width, animation.height
end

-- Draw the character with the current animation frame
function drawCharacter(character)
  local animation = character.animations[character.state]
  local sheetX, sheetY, frameWidth, frameHeight = getFrameData(animation, character.currentFrame)
  -- (Replace with your sprite library function to draw the sprite)
  -- love.graphics.draw(animation.sprite, sheetX, sheetY, frameWidth, frameHeight, character.x, character.y)
end

-- Placeholder function for handling player input (replace with actual controls)
function handleInput(player)
  if love.keyboard.isDown("w") then
    setAnimation(player, "Jump")
  elseif love.keyboard.isDown("d") then
    setAnimation(player, "Run")
  elseif love.keyboard.isDown("s") then
    setAnimation(player, "Idle")
  elseif love.keyboard.isDown("a") then
    setAnimation(player, "Attack")
  end
end

-- Placeholder function for collision detection (replace with your implementation)
function isCollision(character1, character2)
  -- Implement logic to check for character bounding box overlap
  return math.abs(character1.x - character2.x) < 50 and math.abs(character1.y - character2.y) < 50
end

-- Placeholder function for handling character taking a hit (replace with damage logic)
function takeHit(character)
  character.health = character.health - 10
  if character.health <= 0 then
    setAnimation(character, "Death")
  else
    setAnimation(character, "
